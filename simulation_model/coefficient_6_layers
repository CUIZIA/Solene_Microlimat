from sympy import symbols, Matrix, expand, collect

p, r1, r2, r3, r4, r5, r6, c1, c2, c3, c4, c5, c6 = symbols(
    'p r1 r2 r3 r4 r5 r6 c1 c2 c3 c4 c5 c6', real=True
)

def M(r, c):
    return Matrix([
        [1 + p*r*c/2 + (p*r*c)**2/24, r*(1 + p*r*c/6 + (p*r*c)**2/120)],
        [p*c*(1+p*r*c/6),           1 + p*r*c/2 + (p*r*c)**2/24]
    ])

M1 = M(r1, c1)
M2 = M(r2, c2)
M3 = M(r3, c3)
M4 = M(r4, c4)
M5 = M(r5, c5)
M6 = M(r6, c6)

M_total = M1*M2*M3*M4*M5*M6
M_simplified = M_total.applyfunc(expand)

left_up = collect(M_simplified[0,0], p)
m1 = left_up.coeff(p, 1)
m2 = left_up.coeff(p, 2)

print(expr_collected)

python:
m1 = c1*r1/2 + c2*r1 + c2*r2/2 + c3*r1 + c3*r2 + c3*r3/2 + c4*r1 + c4*r2 + c4*r3 + c4*r4/2 + c5*r1 + c5*r2 + c5*r3 + c5*r4 + c5*r5/2 + c6*r1 + c6*r2 + c6*r3 + c6*r4 + c6*r5 + c6*r6/2

m2 = c1**2*r1**2/24 + c1*c2*r1**2/6 + c1*c2*r1*r2/4 + c1*c3*r1**2/6 + c1*c3*r1*r2/2 + c1*c3*r1*r3/4 + c1*c4*r1**2/6 + c1*c4*r1*r2/2 + c1*c4*r1*r3/2 + c1*c4*r1*r4/4 + c1*c5*r1**2/6 + c1*c5*r1*r2/2 + c1*c5*r1*r3/2 + c1*c5*r1*r4/2 + c1*c5*r1*r5/4 + c1*c6*r1**2/6 + c1*c6*r1*r2/2 + c1*c6*r1*r3/2 + c1*c6*r1*r4/2 + c1*c6*r1*r5/2 + c1*c6*r1*r6/4 + c2**2*r1*r2/6 + c2**2*r2**2/24 + c2*c3*r1*r2/2 + c2*c3*r1*r3/2 + c2*c3*r2**2/6 + c2*c3*r2*r3/4 + c2*c4*r1*r2/2 + c2*c4*r1*r3 + c2*c4*r1*r4/2 + c2*c4*r2**2/6 + c2*c4*r2*r3/2 + c2*c4*r2*r4/4 + c2*c5*r1*r2/2 + c2*c5*r1*r3 + c2*c5*r1*r4 + c2*c5*r1*r5/2 + c2*c5*r2**2/6 + c2*c5*r2*r3/2 + c2*c5*r2*r4/2 + c2*c5*r2*r5/4 + c2*c6*r1*r2/2 + c2*c6*r1*r3 + c2*c6*r1*r4 + c2*c6*r1*r5 + c2*c6*r1*r6/2 + c2*c6*r2**2/6 + c2*c6*r2*r3/2 + c2*c6*r2*r4/2 + c2*c6*r2*r5/2 + c2*c6*r2*r6/4 + c3**2*r1*r3/6 + c3**2*r2*r3/6 + c3**2*r3**2/24 + c3*c4*r1*r3/2 + c3*c4*r1*r4/2 + c3*c4*r2*r3/2 + c3*c4*r2*r4/2 + c3*c4*r3**2/6 + c3*c4*r3*r4/4 + c3*c5*r1*r3/2 + c3*c5*r1*r4 + c3*c5*r1*r5/2 + c3*c5*r2*r3/2 + c3*c5*r2*r4 + c3*c5*r2*r5/2 + c3*c5*r3**2/6 + c3*c5*r3*r4/2 + c3*c5*r3*r5/4 + c3*c6*r1*r3/2 + c3*c6*r1*r4 + c3*c6*r1*r5 + c3*c6*r1*r6/2 + c3*c6*r2*r3/2 + c3*c6*r2*r4 + c3*c6*r2*r5 + c3*c6*r2*r6/2 + c3*c6*r3**2/6 + c3*c6*r3*r4/2 + c3*c6*r3*r5/2 + c3*c6*r3*r6/4 + c4**2*r1*r4/6 + c4**2*r2*r4/6 + c4**2*r3*r4/6 + c4**2*r4**2/24 + c4*c5*r1*r4/2 + c4*c5*r1*r5/2 + c4*c5*r2*r4/2 + c4*c5*r2*r5/2 + c4*c5*r3*r4/2 + c4*c5*r3*r5/2 + c4*c5*r4**2/6 + c4*c5*r4*r5/4 + c4*c6*r1*r4/2 + c4*c6*r1*r5 + c4*c6*r1*r6/2 + c4*c6*r2*r4/2 + c4*c6*r2*r5 + c4*c6*r2*r6/2 + c4*c6*r3*r4/2 + c4*c6*r3*r5 + c4*c6*r3*r6/2 + c4*c6*r4**2/6 + c4*c6*r4*r5/2 + c4*c6*r4*r6/4 + c5**2*r1*r5/6 + c5**2*r2*r5/6 + c5**2*r3*r5/6 + c5**2*r4*r5/6 + c5**2*r5**2/24 + c5*c6*r1*r5/2 + c5*c6*r1*r6/2 + c5*c6*r2*r5/2 + c5*c6*r2*r6/2 + c5*c6*r3*r5/2 + c5*c6*r3*r6/2 + c5*c6*r4*r5/2 + c5*c6*r4*r6/2 + c5*c6*r5**2/6 + c5*c6*r5*r6/4 + c6**2*r1*r6/6 + c6**2*r2*r6/6 + c6**2*r3*r6/6 + c6**2*r4*r6/6 + c6**2*r5*r6/6 + c6**2*r6**2/24

n1 = c1*r1**2/6 + c1*r1*r2/2 + c1*r1*r3/2 + c1*r1*r4/2 + c1*r1*r5/2 + c1*r1*r6/2 + c2*r1*r2/2 + c2*r1*r3 + c2*r1*r4 + c2*r1*r5 + c2*r1*r6 + c2*r2**2/6 + c2*r2*r3/2 + c2*r2*r4/2 + c2*r2*r5/2 + c2*r2*r6/2 + c3*r1*r3/2 + c3*r1*r4 + c3*r1*r5 + c3*r1*r6 + c3*r2*r3/2 + c3*r2*r4 + c3*r2*r5 + c3*r2*r6 + c3*r3**2/6 + c3*r3*r4/2 + c3*r3*r5/2 + c3*r3*r6/2 + c4*r1*r4/2 + c4*r1*r5 + c4*r1*r6 + c4*r2*r4/2 + c4*r2*r5 + c4*r2*r6 + c4*r3*r4/2 + c4*r3*r5 + c4*r3*r6 + c4*r4**2/6 + c4*r4*r5/2 + c4*r4*r6/2 + c5*r1*r5/2 + c5*r1*r6 + c5*r2*r5/2 + c5*r2*r6 + c5*r3*r5/2 + c5*r3*r6 + c5*r4*r5/2 + c5*r4*r6 + c5*r5**2/6 + c5*r5*r6/2 + c6*r1*r6/2 + c6*r2*r6/2 + c6*r3*r6/2 + c6*r4*r6/2 + c6*r5*r6/2 + c6*r6**2/6

n2 = c1**2*r1**3/120 + c1**2*r1**2*r2/24 + c1**2*r1**2*r3/24 + c1**2*r1**2*r4/24 + c1**2*r1**2*r5/24 + c1**2*r1**2*r6/24 + c1*c2*r1**2*r2/12 + c1*c2*r1**2*r3/6 + c1*c2*r1**2*r4/6 + c1*c2*r1**2*r5/6 + c1*c2*r1**2*r6/6 + c1*c2*r1*r2**2/12 + c1*c2*r1*r2*r3/4 + c1*c2*r1*r2*r4/4 + c1*c2*r1*r2*r5/4 + c1*c2*r1*r2*r6/4 + c1*c3*r1**2*r3/12 + c1*c3*r1**2*r4/6 + c1*c3*r1**2*r5/6 + c1*c3*r1**2*r6/6 + c1*c3*r1*r2*r3/4 + c1*c3*r1*r2*r4/2 + c1*c3*r1*r2*r5/2 + c1*c3*r1*r2*r6/2 + c1*c3*r1*r3**2/12 + c1*c3*r1*r3*r4/4 + c1*c3*r1*r3*r5/4 + c1*c3*r1*r3*r6/4 + c1*c4*r1**2*r4/12 + c1*c4*r1**2*r5/6 + c1*c4*r1**2*r6/6 + c1*c4*r1*r2*r4/4 + c1*c4*r1*r2*r5/2 + c1*c4*r1*r2*r6/2 + c1*c4*r1*r3*r4/4 + c1*c4*r1*r3*r5/2 + c1*c4*r1*r3*r6/2 + c1*c4*r1*r4**2/12 + c1*c4*r1*r4*r5/4 + c1*c4*r1*r4*r6/4 + c1*c5*r1**2*r5/12 + c1*c5*r1**2*r6/6 + c1*c5*r1*r2*r5/4 + c1*c5*r1*r2*r6/2 + c1*c5*r1*r3*r5/4 + c1*c5*r1*r3*r6/2 + c1*c5*r1*r4*r5/4 + c1*c5*r1*r4*r6/2 + c1*c5*r1*r5**2/12 + c1*c5*r1*r5*r6/4 + c1*c6*r1**2*r6/12 + c1*c6*r1*r2*r6/4 + c1*c6*r1*r3*r6/4 + c1*c6*r1*r4*r6/4 + c1*c6*r1*r5*r6/4 + c1*c6*r1*r6**2/12 + c2**2*r1*r2**2/24 + c2**2*r1*r2*r3/6 + c2**2*r1*r2*r4/6 + c2**2*r1*r2*r5/6 + c2**2*r1*r2*r6/6 + c2**2*r2**3/120 + c2**2*r2**2*r3/24 + c2**2*r2**2*r4/24 + c2**2*r2**2*r5/24 + c2**2*r2**2*r6/24 + c2*c3*r1*r2*r3/4 + c2*c3*r1*r2*r4/2 + c2*c3*r1*r2*r5/2 + c2*c3*r1*r2*r6/2 + c2*c3*r1*r3**2/6 + c2*c3*r1*r3*r4/2 + c2*c3*r1*r3*r5/2 + c2*c3*r1*r3*r6/2 + c2*c3*r2**2*r3/12 + c2*c3*r2**2*r4/6 + c2*c3*r2**2*r5/6 + c2*c3*r2**2*r6/6 + c2*c3*r2*r3**2/12 + c2*c3*r2*r3*r4/4 + c2*c3*r2*r3*r5/4 + c2*c3*r2*r3*r6/4 + c2*c4*r1*r2*r4/4 + c2*c4*r1*r2*r5/2 + c2*c4*r1*r2*r6/2 + c2*c4*r1*r3*r4/2 + c2*c4*r1*r3*r5 + c2*c4*r1*r3*r6 + c2*c4*r1*r4**2/6 + c2*c4*r1*r4*r5/2 + c2*c4*r1*r4*r6/2 + c2*c4*r2**2*r4/12 + c2*c4*r2**2*r5/6 + c2*c4*r2**2*r6/6 + c2*c4*r2*r3*r4/4 + c2*c4*r2*r3*r5/2 + c2*c4*r2*r3*r6/2 + c2*c4*r2*r4**2/12 + c2*c4*r2*r4*r5/4 + c2*c4*r2*r4*r6/4 + c2*c5*r1*r2*r5/4 + c2*c5*r1*r2*r6/2 + c2*c5*r1*r3*r5/2 + c2*c5*r1*r3*r6 + c2*c5*r1*r4*r5/2 + c2*c5*r1*r4*r6 + c2*c5*r1*r5**2/6 + c2*c5*r1*r5*r6/2 + c2*c5*r2**2*r5/12 + c2*c5*r2**2*r6/6 + c2*c5*r2*r3*r5/4 + c2*c5*r2*r3*r6/2 + c2*c5*r2*r4*r5/4 + c2*c5*r2*r4*r6/2 + c2*c5*r2*r5**2/12 + c2*c5*r2*r5*r6/4 + c2*c6*r1*r2*r6/4 + c2*c6*r1*r3*r6/2 + c2*c6*r1*r4*r6/2 + c2*c6*r1*r5*r6/2 + c2*c6*r1*r6**2/6 + c2*c6*r2**2*r6/12 + c2*c6*r2*r3*r6/4 + c2*c6*r2*r4*r6/4 + c2*c6*r2*r5*r6/4 + c2*c6*r2*r6**2/12 + c3**2*r1*r3**2/24 + c3**2*r1*r3*r4/6 + c3**2*r1*r3*r5/6 + c3**2*r1*r3*r6/6 + c3**2*r2*r3**2/24 + c3**2*r2*r3*r4/6 + c3**2*r2*r3*r5/6 + c3**2*r2*r3*r6/6 + c3**2*r3**3/120 + c3**2*r3**2*r4/24 + c3**2*r3**2*r5/24 + c3**2*r3**2*r6/24 + c3*c4*r1*r3*r4/4 + c3*c4*r1*r3*r5/2 + c3*c4*r1*r3*r6/2 + c3*c4*r1*r4**2/6 + c3*c4*r1*r4*r5/2 + c3*c4*r1*r4*r6/2 + c3*c4*r2*r3*r4/4 + c3*c4*r2*r3*r5/2 + c3*c4*r2*r3*r6/2 + c3*c4*r2*r4**2/6 + c3*c4*r2*r4*r5/2 + c3*c4*r2*r4*r6/2 + c3*c4*r3**2*r4/12 + c3*c4*r3**2*r5/6 + c3*c4*r3**2*r6/6 + c3*c4*r3*r4**2/12 + c3*c4*r3*r4*r5/4 + c3*c4*r3*r4*r6/4 + c3*c5*r1*r3*r5/4 + c3*c5*r1*r3*r6/2 + c3*c5*r1*r4*r5/2 + c3*c5*r1*r4*r6 + c3*c5*r1*r5**2/6 + c3*c5*r1*r5*r6/2 + c3*c5*r2*r3*r5/4 + c3*c5*r2*r3*r6/2 + c3*c5*r2*r4*r5/2 + c3*c5*r2*r4*r6 + c3*c5*r2*r5**2/6 + c3*c5*r2*r5*r6/2 + c3*c5*r3**2*r5/12 + c3*c5*r3**2*r6/6 + c3*c5*r3*r4*r5/4 + c3*c5*r3*r4*r6/2 + c3*c5*r3*r5**2/12 + c3*c5*r3*r5*r6/4 + c3*c6*r1*r3*r6/4 + c3*c6*r1*r4*r6/2 + c3*c6*r1*r5*r6/2 + c3*c6*r1*r6**2/6 + c3*c6*r2*r3*r6/4 + c3*c6*r2*r4*r6/2 + c3*c6*r2*r5*r6/2 + c3*c6*r2*r6**2/6 + c3*c6*r3**2*r6/12 + c3*c6*r3*r4*r6/4 + c3*c6*r3*r5*r6/4 + c3*c6*r3*r6**2/12 + c4**2*r1*r4**2/24 + c4**2*r1*r4*r5/6 + c4**2*r1*r4*r6/6 + c4**2*r2*r4**2/24 + c4**2*r2*r4*r5/6 + c4**2*r2*r4*r6/6 + c4**2*r3*r4**2/24 + c4**2*r3*r4*r5/6 + c4**2*r3*r4*r6/6 + c4**2*r4**3/120 + c4**2*r4**2*r5/24 + c4**2*r4**2*r6/24 + c4*c5*r1*r4*r5/4 + c4*c5*r1*r4*r6/2 + c4*c5*r1*r5**2/6 + c4*c5*r1*r5*r6/2 + c4*c5*r2*r4*r5/4 + c4*c5*r2*r4*r6/2 + c4*c5*r2*r5**2/6 + c4*c5*r2*r5*r6/2 + c4*c5*r3*r4*r5/4 + c4*c5*r3*r4*r6/2 + c4*c5*r3*r5**2/6 + c4*c5*r3*r5*r6/2 + c4*c5*r4**2*r5/12 + c4*c5*r4**2*r6/6 + c4*c5*r4*r5**2/12 + c4*c5*r4*r5*r6/4 + c4*c6*r1*r4*r6/4 + c4*c6*r1*r5*r6/2 + c4*c6*r1*r6**2/6 + c4*c6*r2*r4*r6/4 + c4*c6*r2*r5*r6/2 + c4*c6*r2*r6**2/6 + c4*c6*r3*r4*r6/4 + c4*c6*r3*r5*r6/2 + c4*c6*r3*r6**2/6 + c4*c6*r4**2*r6/12 + c4*c6*r4*r5*r6/4 + c4*c6*r4*r6**2/12 + c5**2*r1*r5**2/24 + c5**2*r1*r5*r6/6 + c5**2*r2*r5**2/24 + c5**2*r2*r5*r6/6 + c5**2*r3*r5**2/24 + c5**2*r3*r5*r6/6 + c5**2*r4*r5**2/24 + c5**2*r4*r5*r6/6 + c5**2*r5**3/120 + c5**2*r5**2*r6/24 + c5*c6*r1*r5*r6/4 + c5*c6*r1*r6**2/6 + c5*c6*r2*r5*r6/4 + c5*c6*r2*r6**2/6 + c5*c6*r3*r5*r6/4 + c5*c6*r3*r6**2/6 + c5*c6*r4*r5*r6/4 + c5*c6*r4*r6**2/6 + c5*c6*r5**2*r6/12 + c5*c6*r5*r6**2/12 + c6**2*r1*r6**2/24 + c6**2*r2*r6**2/24 + c6**2*r3*r6**2/24 + c6**2*r4*r6**2/24 + c6**2*r5*r6**2/24 + c6**2*r6**3/120

o2 = c1**2*r1/6 + c1*c2*r1/2 + c1*c2*r2/2 + c1*c3*r1/2 + c1*c3*r2 + c1*c3*r3/2 + c1*c4*r1/2 + c1*c4*r2 + c1*c4*r3 + c1*c4*r4/2 + c1*c5*r1/2 + c1*c5*r2 + c1*c5*r3 + c1*c5*r4 + c1*c5*r5/2 + c1*c6*r1/2 + c1*c6*r2 + c1*c6*r3 + c1*c6*r4 + c1*c6*r5 + c1*c6*r6/2 + c2**2*r2/6 + c2*c3*r2/2 + c2*c3*r3/2 + c2*c4*r2/2 + c2*c4*r3 + c2*c4*r4/2 + c2*c5*r2/2 + c2*c5*r3 + c2*c5*r4 + c2*c5*r5/2 + c2*c6*r2/2 + c2*c6*r3 + c2*c6*r4 + c2*c6*r5 + c2*c6*r6/2 + c3**2*r3/6 + c3*c4*r3/2 + c3*c4*r4/2 + c3*c5*r3/2 + c3*c5*r4 + c3*c5*r5/2 + c3*c6*r3/2 + c3*c6*r4 + c3*c6*r5 + c3*c6*r6/2 + c4**2*r4/6 + c4*c5*r4/2 + c4*c5*r5/2 + c4*c6*r4/2 + c4*c6*r5 + c4*c6*r6/2 + c5**2*r5/6 + c5*c6*r5/2 + c5*c6*r6/2 + c6**2*r6/6

p1 = c1*r1/2 + c1*r2 + c1*r3 + c1*r4 + c1*r5 + c1*r6 + c2*r2/2 + c2*r3 + c2*r4 + c2*r5 + c2*r6 + c3*r3/2 + c3*r4 + c3*r5 + c3*r6 + c4*r4/2 + c4*r5 + c4*r6 + c5*r5/2 + c5*r6 + c6*r6/2

p2 = c1**2*r1**2/24 + c1**2*r1*r2/6 + c1**2*r1*r3/6 + c1**2*r1*r4/6 + c1**2*r1*r5/6 + c1**2*r1*r6/6 + c1*c2*r1*r2/4 + c1*c2*r1*r3/2 + c1*c2*r1*r4/2 + c1*c2*r1*r5/2 + c1*c2*r1*r6/2 + c1*c2*r2**2/6 + c1*c2*r2*r3/2 + c1*c2*r2*r4/2 + c1*c2*r2*r5/2 + c1*c2*r2*r6/2 + c1*c3*r1*r3/4 + c1*c3*r1*r4/2 + c1*c3*r1*r5/2 + c1*c3*r1*r6/2 + c1*c3*r2*r3/2 + c1*c3*r2*r4 + c1*c3*r2*r5 + c1*c3*r2*r6 + c1*c3*r3**2/6 + c1*c3*r3*r4/2 + c1*c3*r3*r5/2 + c1*c3*r3*r6/2 + c1*c4*r1*r4/4 + c1*c4*r1*r5/2 + c1*c4*r1*r6/2 + c1*c4*r2*r4/2 + c1*c4*r2*r5 + c1*c4*r2*r6 + c1*c4*r3*r4/2 + c1*c4*r3*r5 + c1*c4*r3*r6 + c1*c4*r4**2/6 + c1*c4*r4*r5/2 + c1*c4*r4*r6/2 + c1*c5*r1*r5/4 + c1*c5*r1*r6/2 + c1*c5*r2*r5/2 + c1*c5*r2*r6 + c1*c5*r3*r5/2 + c1*c5*r3*r6 + c1*c5*r4*r5/2 + c1*c5*r4*r6 + c1*c5*r5**2/6 + c1*c5*r5*r6/2 + c1*c6*r1*r6/4 + c1*c6*r2*r6/2 + c1*c6*r3*r6/2 + c1*c6*r4*r6/2 + c1*c6*r5*r6/2 + c1*c6*r6**2/6 + c2**2*r2**2/24 + c2**2*r2*r3/6 + c2**2*r2*r4/6 + c2**2*r2*r5/6 + c2**2*r2*r6/6 + c2*c3*r2*r3/4 + c2*c3*r2*r4/2 + c2*c3*r2*r5/2 + c2*c3*r2*r6/2 + c2*c3*r3**2/6 + c2*c3*r3*r4/2 + c2*c3*r3*r5/2 + c2*c3*r3*r6/2 + c2*c4*r2*r4/4 + c2*c4*r2*r5/2 + c2*c4*r2*r6/2 + c2*c4*r3*r4/2 + c2*c4*r3*r5 + c2*c4*r3*r6 + c2*c4*r4**2/6 + c2*c4*r4*r5/2 + c2*c4*r4*r6/2 + c2*c5*r2*r5/4 + c2*c5*r2*r6/2 + c2*c5*r3*r5/2 + c2*c5*r3*r6 + c2*c5*r4*r5/2 + c2*c5*r4*r6 + c2*c5*r5**2/6 + c2*c5*r5*r6/2 + c2*c6*r2*r6/4 + c2*c6*r3*r6/2 + c2*c6*r4*r6/2 + c2*c6*r5*r6/2 + c2*c6*r6**2/6 + c3**2*r3**2/24 + c3**2*r3*r4/6 + c3**2*r3*r5/6 + c3**2*r3*r6/6 + c3*c4*r3*r4/4 + c3*c4*r3*r5/2 + c3*c4*r3*r6/2 + c3*c4*r4**2/6 + c3*c4*r4*r5/2 + c3*c4*r4*r6/2 + c3*c5*r3*r5/4 + c3*c5*r3*r6/2 + c3*c5*r4*r5/2 + c3*c5*r4*r6 + c3*c5*r5**2/6 + c3*c5*r5*r6/2 + c3*c6*r3*r6/4 + c3*c6*r4*r6/2 + c3*c6*r5*r6/2 + c3*c6*r6**2/6 + c4**2*r4**2/24 + c4**2*r4*r5/6 + c4**2*r4*r6/6 + c4*c5*r4*r5/4 + c4*c5*r4*r6/2 + c4*c5*r5**2/6 + c4*c5*r5*r6/2 + c4*c6*r4*r6/4 + c4*c6*r5*r6/2 + c4*c6*r6**2/6 + c5**2*r5**2/24 + c5**2*r5*r6/6 + c5*c6*r5*r6/4 + c5*c6*r6**2/6 + c6**2*r6**2/24


C code:
m1 = c1*r1/2 + c2*r1 + c2*r2/2 + c3*r1 + c3*r2 + c3*r3/2 + c4*r1 + c4*r2 + c4*r3 + c4*r4/2 + c5*r1 + c5*r2 + c5*r3 + c5*r4 + c5*r5/2 + c6*r1 + c6*r2 + c6*r3 + c6*r4 + c6*r5 + c6*r6/2;

m2 = pow(c1,2.0)*pow(r1,2.0)/24 + c1*c2*pow(r1,2.0)/6 + c1*c2*r1*r2/4 + c1*c3*pow(r1,2.0)/6 + c1*c3*r1*r2/2 + c1*c3*r1*r3/4 + c1*c4*pow(r1,2.0)/6 + c1*c4*r1*r2/2 + c1*c4*r1*r3/2 + c1*c4*r1*r4/4 + c1*c5*pow(r1,2.0)/6 + c1*c5*r1*r2/2 + c1*c5*r1*r3/2 + c1*c5*r1*r4/2 + c1*c5*r1*r5/4 + c1*c6*pow(r1,2.0)/6 + c1*c6*r1*r2/2 + c1*c6*r1*r3/2 + c1*c6*r1*r4/2 + c1*c6*r1*r5/2 + c1*c6*r1*r6/4 + pow(c2,2.0)*r1*r2/6 + pow(c2,2.0)*pow(r2,2.0)/24 + c2*c3*r1*r2/2 + c2*c3*r1*r3/2 + c2*c3*pow(r2,2.0)/6 + c2*c3*r2*r3/4 + c2*c4*r1*r2/2 + c2*c4*r1*r3 + c2*c4*r1*r4/2 + c2*c4*pow(r2,2.0)/6 + c2*c4*r2*r3/2 + c2*c4*r2*r4/4 + c2*c5*r1*r2/2 + c2*c5*r1*r3 + c2*c5*r1*r4 + c2*c5*r1*r5/2 + c2*c5*pow(r2,2.0)/6 + c2*c5*r2*r3/2 + c2*c5*r2*r4/2 + c2*c5*r2*r5/4 + c2*c6*r1*r2/2 + c2*c6*r1*r3 + c2*c6*r1*r4 + c2*c6*r1*r5 + c2*c6*r1*r6/2 + c2*c6*pow(r2,2.0)/6 + c2*c6*r2*r3/2 + c2*c6*r2*r4/2 + c2*c6*r2*r5/2 + c2*c6*r2*r6/4 + pow(c3,2.0)*r1*r3/6 + pow(c3,2.0)*r2*r3/6 + pow(c3,2.0)*pow(r3,2.0)/24 + c3*c4*r1*r3/2 + c3*c4*r1*r4/2 + c3*c4*r2*r3/2 + c3*c4*r2*r4/2 + c3*c4*pow(r3,2.0)/6 + c3*c4*r3*r4/4 + c3*c5*r1*r3/2 + c3*c5*r1*r4 + c3*c5*r1*r5/2 + c3*c5*r2*r3/2 + c3*c5*r2*r4 + c3*c5*r2*r5/2 + c3*c5*pow(r3,2.0)/6 + c3*c5*r3*r4/2 + c3*c5*r3*r5/4 + c3*c6*r1*r3/2 + c3*c6*r1*r4 + c3*c6*r1*r5 + c3*c6*r1*r6/2 + c3*c6*r2*r3/2 + c3*c6*r2*r4 + c3*c6*r2*r5 + c3*c6*r2*r6/2 + c3*c6*pow(r3,2.0)/6 + c3*c6*r3*r4/2 + c3*c6*r3*r5/2 + c3*c6*r3*r6/4 + pow(c4,2.0)*r1*r4/6 + pow(c4,2.0)*r2*r4/6 + pow(c4,2.0)*r3*r4/6 + pow(c4,2.0)*pow(r4,2.0)/24 + c4*c5*r1*r4/2 + c4*c5*r1*r5/2 + c4*c5*r2*r4/2 + c4*c5*r2*r5/2 + c4*c5*r3*r4/2 + c4*c5*r3*r5/2 + c4*c5*pow(r4,2.0)/6 + c4*c5*r4*r5/4 + c4*c6*r1*r4/2 + c4*c6*r1*r5 + c4*c6*r1*r6/2 + c4*c6*r2*r4/2 + c4*c6*r2*r5 + c4*c6*r2*r6/2 + c4*c6*r3*r4/2 + c4*c6*r3*r5 + c4*c6*r3*r6/2 + c4*c6*pow(r4,2.0)/6 + c4*c6*r4*r5/2 + c4*c6*r4*r6/4 + pow(c5,2.0)*r1*r5/6 + pow(c5,2.0)*r2*r5/6 + pow(c5,2.0)*r3*r5/6 + pow(c5,2.0)*r4*r5/6 + pow(c5,2.0)*pow(r5,2.0)/24 + c5*c6*r1*r5/2 + c5*c6*r1*r6/2 + c5*c6*r2*r5/2 + c5*c6*r2*r6/2 + c5*c6*r3*r5/2 + c5*c6*r3*r6/2 + c5*c6*r4*r5/2 + c5*c6*r4*r6/2 + c5*c6*pow(r5,2.0)/6 + c5*c6*r5*r6/4 + pow(c6,2.0)*r1*r6/6 + pow(c6,2.0)*r2*r6/6 + pow(c6,2.0)*r3*r6/6 + pow(c6,2.0)*r4*r6/6 + pow(c6,2.0)*r5*r6/6 + pow(c6,2.0)*pow(r6,2.0)/24;

n1 = c1*pow(r1,2.0)/6 + c1*r1*r2/2 + c1*r1*r3/2 + c1*r1*r4/2 + c1*r1*r5/2 + c1*r1*r6/2 + c2*r1*r2/2 + c2*r1*r3 + c2*r1*r4 + c2*r1*r5 + c2*r1*r6 + c2*pow(r2,2.0)/6 + c2*r2*r3/2 + c2*r2*r4/2 + c2*r2*r5/2 + c2*r2*r6/2 + c3*r1*r3/2 + c3*r1*r4 + c3*r1*r5 + c3*r1*r6 + c3*r2*r3/2 + c3*r2*r4 + c3*r2*r5 + c3*r2*r6 + c3*pow(r3,2.0)/6 + c3*r3*r4/2 + c3*r3*r5/2 + c3*r3*r6/2 + c4*r1*r4/2 + c4*r1*r5 + c4*r1*r6 + c4*r2*r4/2 + c4*r2*r5 + c4*r2*r6 + c4*r3*r4/2 + c4*r3*r5 + c4*r3*r6 + c4*pow(r4,2.0)/6 + c4*r4*r5/2 + c4*r4*r6/2 + c5*r1*r5/2 + c5*r1*r6 + c5*r2*r5/2 + c5*r2*r6 + c5*r3*r5/2 + c5*r3*r6 + c5*r4*r5/2 + c5*r4*r6 + c5*pow(r5,2.0)/6 + c5*r5*r6/2 + c6*r1*r6/2 + c6*r2*r6/2 + c6*r3*r6/2 + c6*r4*r6/2 + c6*r5*r6/2 + c6*pow(r6,2.0)/6;

n2 = pow(c1,2.0)*pow(r1,3.0)/120 + pow(c1,2.0)*pow(r1,2.0)*r2/24 + pow(c1,2.0)*pow(r1,2.0)*r3/24 + pow(c1,2.0)*pow(r1,2.0)*r4/24 + pow(c1,2.0)*pow(r1,2.0)*r5/24 + pow(c1,2.0)*pow(r1,2.0)*r6/24 + c1*c2*pow(r1,2.0)*r2/12 + c1*c2*pow(r1,2.0)*r3/6 + c1*c2*pow(r1,2.0)*r4/6 + c1*c2*pow(r1,2.0)*r5/6 + c1*c2*pow(r1,2.0)*r6/6 + c1*c2*r1*pow(r2,2.0)/12 + c1*c2*r1*r2*r3/4 + c1*c2*r1*r2*r4/4 + c1*c2*r1*r2*r5/4 + c1*c2*r1*r2*r6/4 + c1*c3*pow(r1,2.0)*r3/12 + c1*c3*pow(r1,2.0)*r4/6 + c1*c3*pow(r1,2.0)*r5/6 + c1*c3*pow(r1,2.0)*r6/6 + c1*c3*r1*r2*r3/4 + c1*c3*r1*r2*r4/2 + c1*c3*r1*r2*r5/2 + c1*c3*r1*r2*r6/2 + c1*c3*r1*pow(r3,2.0)/12 + c1*c3*r1*r3*r4/4 + c1*c3*r1*r3*r5/4 + c1*c3*r1*r3*r6/4 + c1*c4*pow(r1,2.0)*r4/12 + c1*c4*pow(r1,2.0)*r5/6 + c1*c4*pow(r1,2.0)*r6/6 + c1*c4*r1*r2*r4/4 + c1*c4*r1*r2*r5/2 + c1*c4*r1*r2*r6/2 + c1*c4*r1*r3*r4/4 + c1*c4*r1*r3*r5/2 + c1*c4*r1*r3*r6/2 + c1*c4*r1*pow(r4,2.0)/12 + c1*c4*r1*r4*r5/4 + c1*c4*r1*r4*r6/4 + c1*c5*pow(r1,2.0)*r5/12 + c1*c5*pow(r1,2.0)*r6/6 + c1*c5*r1*r2*r5/4 + c1*c5*r1*r2*r6/2 + c1*c5*r1*r3*r5/4 + c1*c5*r1*r3*r6/2 + c1*c5*r1*r4*r5/4 + c1*c5*r1*r4*r6/2 + c1*c5*r1*pow(r5,2.0)/12 + c1*c5*r1*r5*r6/4 + c1*c6*pow(r1,2.0)*r6/12 + c1*c6*r1*r2*r6/4 + c1*c6*r1*r3*r6/4 + c1*c6*r1*r4*r6/4 + c1*c6*r1*r5*r6/4 + c1*c6*r1*pow(r6,2.0)/12 + pow(c2,2.0)*r1*pow(r2,2.0)/24 + pow(c2,2.0)*r1*r2*r3/6 + pow(c2,2.0)*r1*r2*r4/6 + pow(c2,2.0)*r1*r2*r5/6 + pow(c2,2.0)*r1*r2*r6/6 + pow(c2,2.0)*pow(r2,3.0)/120 + pow(c2,2.0)*pow(r2,2.0)*r3/24 + pow(c2,2.0)*pow(r2,2.0)*r4/24 + pow(c2,2.0)*pow(r2,2.0)*r5/24 + pow(c2,2.0)*pow(r2,2.0)*r6/24 + c2*c3*r1*r2*r3/4 + c2*c3*r1*r2*r4/2 + c2*c3*r1*r2*r5/2 + c2*c3*r1*r2*r6/2 + c2*c3*r1*pow(r3,2.0)/6 + c2*c3*r1*r3*r4/2 + c2*c3*r1*r3*r5/2 + c2*c3*r1*r3*r6/2 + c2*c3*pow(r2,2.0)*r3/12 + c2*c3*pow(r2,2.0)*r4/6 + c2*c3*pow(r2,2.0)*r5/6 + c2*c3*pow(r2,2.0)*r6/6 + c2*c3*r2*pow(r3,2.0)/12 + c2*c3*r2*r3*r4/4 + c2*c3*r2*r3*r5/4 + c2*c3*r2*r3*r6/4 + c2*c4*r1*r2*r4/4 + c2*c4*r1*r2*r5/2 + c2*c4*r1*r2*r6/2 + c2*c4*r1*r3*r4/2 + c2*c4*r1*r3*r5 + c2*c4*r1*r3*r6 + c2*c4*r1*pow(r4,2.0)/6 + c2*c4*r1*r4*r5/2 + c2*c4*r1*r4*r6/2 + c2*c4*pow(r2,2.0)*r4/12 + c2*c4*pow(r2,2.0)*r5/6 + c2*c4*pow(r2,2.0)*r6/6 + c2*c4*r2*r3*r4/4 + c2*c4*r2*r3*r5/2 + c2*c4*r2*r3*r6/2 + c2*c4*r2*pow(r4,2.0)/12 + c2*c4*r2*r4*r5/4 + c2*c4*r2*r4*r6/4 + c2*c5*r1*r2*r5/4 + c2*c5*r1*r2*r6/2 + c2*c5*r1*r3*r5/2 + c2*c5*r1*r3*r6 + c2*c5*r1*r4*r5/2 + c2*c5*r1*r4*r6 + c2*c5*r1*pow(r5,2.0)/6 + c2*c5*r1*r5*r6/2 + c2*c5*pow(r2,2.0)*r5/12 + c2*c5*pow(r2,2.0)*r6/6 + c2*c5*r2*r3*r5/4 + c2*c5*r2*r3*r6/2 + c2*c5*r2*r4*r5/4 + c2*c5*r2*r4*r6/2 + c2*c5*r2*pow(r5,2.0)/12 + c2*c5*r2*r5*r6/4 + c2*c6*r1*r2*r6/4 + c2*c6*r1*r3*r6/2 + c2*c6*r1*r4*r6/2 + c2*c6*r1*r5*r6/2 + c2*c6*r1*pow(r6,2.0)/6 + c2*c6*pow(r2,2.0)*r6/12 + c2*c6*r2*r3*r6/4 + c2*c6*r2*r4*r6/4 + c2*c6*r2*r5*r6/4 + c2*c6*r2*pow(r6,2.0)/12 + pow(c3,2.0)*r1*pow(r3,2.0)/24 + pow(c3,2.0)*r1*r3*r4/6 + pow(c3,2.0)*r1*r3*r5/6 + pow(c3,2.0)*r1*r3*r6/6 + pow(c3,2.0)*r2*pow(r3,2.0)/24 + pow(c3,2.0)*r2*r3*r4/6 + pow(c3,2.0)*r2*r3*r5/6 + pow(c3,2.0)*r2*r3*r6/6 + pow(c3,2.0)*pow(r3,3.0)/120 + pow(c3,2.0)*pow(r3,2.0)*r4/24 + pow(c3,2.0)*pow(r3,2.0)*r5/24 + pow(c3,2.0)*pow(r3,2.0)*r6/24 + c3*c4*r1*r3*r4/4 + c3*c4*r1*r3*r5/2 + c3*c4*r1*r3*r6/2 + c3*c4*r1*pow(r4,2.0)/6 + c3*c4*r1*r4*r5/2 + c3*c4*r1*r4*r6/2 + c3*c4*r2*r3*r4/4 + c3*c4*r2*r3*r5/2 + c3*c4*r2*r3*r6/2 + c3*c4*r2*pow(r4,2.0)/6 + c3*c4*r2*r4*r5/2 + c3*c4*r2*r4*r6/2 + c3*c4*pow(r3,2.0)*r4/12 + c3*c4*pow(r3,2.0)*r5/6 + c3*c4*pow(r3,2.0)*r6/6 + c3*c4*r3*pow(r4,2.0)/12 + c3*c4*r3*r4*r5/4 + c3*c4*r3*r4*r6/4 + c3*c5*r1*r3*r5/4 + c3*c5*r1*r3*r6/2 + c3*c5*r1*r4*r5/2 + c3*c5*r1*r4*r6 + c3*c5*r1*pow(r5,2.0)/6 + c3*c5*r1*r5*r6/2 + c3*c5*r2*r3*r5/4 + c3*c5*r2*r3*r6/2 + c3*c5*r2*r4*r5/2 + c3*c5*r2*r4*r6 + c3*c5*r2*pow(r5,2.0)/6 + c3*c5*r2*r5*r6/2 + c3*c5*pow(r3,2.0)*r5/12 + c3*c5*pow(r3,2.0)*r6/6 + c3*c5*r3*r4*r5/4 + c3*c5*r3*r4*r6/2 + c3*c5*r3*pow(r5,2.0)/12 + c3*c5*r3*r5*r6/4 + c3*c6*r1*r3*r6/4 + c3*c6*r1*r4*r6/2 + c3*c6*r1*r5*r6/2 + c3*c6*r1*pow(r6,2.0)/6 + c3*c6*r2*r3*r6/4 + c3*c6*r2*r4*r6/2 + c3*c6*r2*r5*r6/2 + c3*c6*r2*pow(r6,2.0)/6 + c3*c6*pow(r3,2.0)*r6/12 + c3*c6*r3*r4*r6/4 + c3*c6*r3*r5*r6/4 + c3*c6*r3*pow(r6,2.0)/12 + pow(c4,2.0)*r1*pow(r4,2.0)/24 + pow(c4,2.0)*r1*r4*r5/6 + pow(c4,2.0)*r1*r4*r6/6 + pow(c4,2.0)*r2*pow(r4,2.0)/24 + pow(c4,2.0)*r2*r4*r5/6 + pow(c4,2.0)*r2*r4*r6/6 + pow(c4,2.0)*r3*pow(r4,2.0)/24 + pow(c4,2.0)*r3*r4*r5/6 + pow(c4,2.0)*r3*r4*r6/6 + pow(c4,2.0)*pow(r4,3.0)/120 + pow(c4,2.0)*pow(r4,2.0)*r5/24 + pow(c4,2.0)*pow(r4,2.0)*r6/24 + c4*c5*r1*r4*r5/4 + c4*c5*r1*r4*r6/2 + c4*c5*r1*pow(r5,2.0)/6 + c4*c5*r1*r5*r6/2 + c4*c5*r2*r4*r5/4 + c4*c5*r2*r4*r6/2 + c4*c5*r2*pow(r5,2.0)/6 + c4*c5*r2*r5*r6/2 + c4*c5*r3*r4*r5/4 + c4*c5*r3*r4*r6/2 + c4*c5*r3*pow(r5,2.0)/6 + c4*c5*r3*r5*r6/2 + c4*c5*pow(r4,2.0)*r5/12 + c4*c5*pow(r4,2.0)*r6/6 + c4*c5*r4*pow(r5,2.0)/12 + c4*c5*r4*r5*r6/4 + c4*c6*r1*r4*r6/4 + c4*c6*r1*r5*r6/2 + c4*c6*r1*pow(r6,2.0)/6 + c4*c6*r2*r4*r6/4 + c4*c6*r2*r5*r6/2 + c4*c6*r2*pow(r6,2.0)/6 + c4*c6*r3*r4*r6/4 + c4*c6*r3*r5*r6/2 + c4*c6*r3*pow(r6,2.0)/6 + c4*c6*pow(r4,2.0)*r6/12 + c4*c6*r4*r5*r6/4 + c4*c6*r4*pow(r6,2.0)/12 + pow(c5,2.0)*r1*pow(r5,2.0)/24 + pow(c5,2.0)*r1*r5*r6/6 + pow(c5,2.0)*r2*pow(r5,2.0)/24 + pow(c5,2.0)*r2*r5*r6/6 + pow(c5,2.0)*r3*pow(r5,2.0)/24 + pow(c5,2.0)*r3*r5*r6/6 + pow(c5,2.0)*r4*pow(r5,2.0)/24 + pow(c5,2.0)*r4*r5*r6/6 + pow(c5,2.0)*pow(r5,3.0)/120 + pow(c5,2.0)*pow(r5,2.0)*r6/24 + c5*c6*r1*r5*r6/4 + c5*c6*r1*pow(r6,2.0)/6 + c5*c6*r2*r5*r6/4 + c5*c6*r2*pow(r6,2.0)/6 + c5*c6*r3*r5*r6/4 + c5*c6*r3*pow(r6,2.0)/6 + c5*c6*r4*r5*r6/4 + c5*c6*r4*pow(r6,2.0)/6 + c5*c6*pow(r5,2.0)*r6/12 + c5*c6*r5*pow(r6,2.0)/12 + pow(c6,2.0)*r1*pow(r6,2.0)/24 + pow(c6,2.0)*r2*pow(r6,2.0)/24 + pow(c6,2.0)*r3*pow(r6,2.0)/24 + pow(c6,2.0)*r4*pow(r6,2.0)/24 + pow(c6,2.0)*r5*pow(r6,2.0)/24 + pow(c6,2.0)*pow(r6,3.0)/120;

o2 = pow(c1,2.0)*r1/6 + c1*c2*r1/2 + c1*c2*r2/2 + c1*c3*r1/2 + c1*c3*r2 + c1*c3*r3/2 + c1*c4*r1/2 + c1*c4*r2 + c1*c4*r3 + c1*c4*r4/2 + c1*c5*r1/2 + c1*c5*r2 + c1*c5*r3 + c1*c5*r4 + c1*c5*r5/2 + c1*c6*r1/2 + c1*c6*r2 + c1*c6*r3 + c1*c6*r4 + c1*c6*r5 + c1*c6*r6/2 + pow(c2,2.0)*r2/6 + c2*c3*r2/2 + c2*c3*r3/2 + c2*c4*r2/2 + c2*c4*r3 + c2*c4*r4/2 + c2*c5*r2/2 + c2*c5*r3 + c2*c5*r4 + c2*c5*r5/2 + c2*c6*r2/2 + c2*c6*r3 + c2*c6*r4 + c2*c6*r5 + c2*c6*r6/2 + pow(c3,2.0)*r3/6 + c3*c4*r3/2 + c3*c4*r4/2 + c3*c5*r3/2 + c3*c5*r4 + c3*c5*r5/2 + c3*c6*r3/2 + c3*c6*r4 + c3*c6*r5 + c3*c6*r6/2 + pow(c4,2.0)*r4/6 + c4*c5*r4/2 + c4*c5*r5/2 + c4*c6*r4/2 + c4*c6*r5 + c4*c6*r6/2 + pow(c5,2.0)*r5/6 + c5*c6*r5/2 + c5*c6*r6/2 + pow(c6,2.0)*r6/6;

p1 = c1*r1/2 + c1*r2 + c1*r3 + c1*r4 + c1*r5 + c1*r6 + c2*r2/2 + c2*r3 + c2*r4 + c2*r5 + c2*r6 + c3*r3/2 + c3*r4 + c3*r5 + c3*r6 + c4*r4/2 + c4*r5 + c4*r6 + c5*r5/2 + c5*r6 + c6*r6/2;

p2 = pow(c1,2.0)*pow(r1,2.0)/24 + pow(c1,2.0)*r1*r2/6 + pow(c1,2.0)*r1*r3/6 + pow(c1,2.0)*r1*r4/6 + pow(c1,2.0)*r1*r5/6 + pow(c1,2.0)*r1*r6/6 + c1*c2*r1*r2/4 + c1*c2*r1*r3/2 + c1*c2*r1*r4/2 + c1*c2*r1*r5/2 + c1*c2*r1*r6/2 + c1*c2*pow(r2,2.0)/6 + c1*c2*r2*r3/2 + c1*c2*r2*r4/2 + c1*c2*r2*r5/2 + c1*c2*r2*r6/2 + c1*c3*r1*r3/4 + c1*c3*r1*r4/2 + c1*c3*r1*r5/2 + c1*c3*r1*r6/2 + c1*c3*r2*r3/2 + c1*c3*r2*r4 + c1*c3*r2*r5 + c1*c3*r2*r6 + c1*c3*pow(r3,2.0)/6 + c1*c3*r3*r4/2 + c1*c3*r3*r5/2 + c1*c3*r3*r6/2 + c1*c4*r1*r4/4 + c1*c4*r1*r5/2 + c1*c4*r1*r6/2 + c1*c4*r2*r4/2 + c1*c4*r2*r5 + c1*c4*r2*r6 + c1*c4*r3*r4/2 + c1*c4*r3*r5 + c1*c4*r3*r6 + c1*c4*pow(r4,2.0)/6 + c1*c4*r4*r5/2 + c1*c4*r4*r6/2 + c1*c5*r1*r5/4 + c1*c5*r1*r6/2 + c1*c5*r2*r5/2 + c1*c5*r2*r6 + c1*c5*r3*r5/2 + c1*c5*r3*r6 + c1*c5*r4*r5/2 + c1*c5*r4*r6 + c1*c5*pow(r5,2.0)/6 + c1*c5*r5*r6/2 + c1*c6*r1*r6/4 + c1*c6*r2*r6/2 + c1*c6*r3*r6/2 + c1*c6*r4*r6/2 + c1*c6*r5*r6/2 + c1*c6*pow(r6,2.0)/6 + pow(c2,2.0)*pow(r2,2.0)/24 + pow(c2,2.0)*r2*r3/6 + pow(c2,2.0)*r2*r4/6 + pow(c2,2.0)*r2*r5/6 + pow(c2,2.0)*r2*r6/6 + c2*c3*r2*r3/4 + c2*c3*r2*r4/2 + c2*c3*r2*r5/2 + c2*c3*r2*r6/2 + c2*c3*pow(r3,2.0)/6 + c2*c3*r3*r4/2 + c2*c3*r3*r5/2 + c2*c3*r3*r6/2 + c2*c4*r2*r4/4 + c2*c4*r2*r5/2 + c2*c4*r2*r6/2 + c2*c4*r3*r4/2 + c2*c4*r3*r5 + c2*c4*r3*r6 + c2*c4*pow(r4,2.0)/6 + c2*c4*r4*r5/2 + c2*c4*r4*r6/2 + c2*c5*r2*r5/4 + c2*c5*r2*r6/2 + c2*c5*r3*r5/2 + c2*c5*r3*r6 + c2*c5*r4*r5/2 + c2*c5*r4*r6 + c2*c5*pow(r5,2.0)/6 + c2*c5*r5*r6/2 + c2*c6*r2*r6/4 + c2*c6*r3*r6/2 + c2*c6*r4*r6/2 + c2*c6*r5*r6/2 + c2*c6*pow(r6,2.0)/6 + pow(c3,2.0)*pow(r3,2.0)/24 + pow(c3,2.0)*r3*r4/6 + pow(c3,2.0)*r3*r5/6 + pow(c3,2.0)*r3*r6/6 + c3*c4*r3*r4/4 + c3*c4*r3*r5/2 + c3*c4*r3*r6/2 + c3*c4*pow(r4,2.0)/6 + c3*c4*r4*r5/2 + c3*c4*r4*r6/2 + c3*c5*r3*r5/4 + c3*c5*r3*r6/2 + c3*c5*r4*r5/2 + c3*c5*r4*r6 + c3*c5*pow(r5,2.0)/6 + c3*c5*r5*r6/2 + c3*c6*r3*r6/4 + c3*c6*r4*r6/2 + c3*c6*r5*r6/2 + c3*c6*pow(r6,2.0)/6 + pow(c4,2.0)*pow(r4,2.0)/24 + pow(c4,2.0)*r4*r5/6 + pow(c4,2.0)*r4*r6/6 + c4*c5*r4*r5/4 + c4*c5*r4*r6/2 + c4*c5*pow(r5,2.0)/6 + c4*c5*r5*r6/2 + c4*c6*r4*r6/4 + c4*c6*r5*r6/2 + c4*c6*pow(r6,2.0)/6 + pow(c5,2.0)*pow(r5,2.0)/24 + pow(c5,2.0)*r5*r6/6 + c5*c6*r5*r6/4 + c5*c6*pow(r6,2.0)/6 + pow(c6,2.0)*pow(r6,2.0)/24;


Formula for each parameter:
r = [1, 2,3,4,5,6]
c = [7,8,9,10,11,12]

def calculate_p2(r, c):
    n = len(r)
    sum_1 = 0
    sum_2 = 0
    
    #calculate c^2
    for i in range(n):
        for j in range(i, n):
            if i == j:
                sum_1 += c[i]**2 * r[i] * r[j] / 24
            else:
                sum_1 += c[i]**2 * r[i] * r[j] / 6

    #calculate cc
    for i in range(n-1):
        for j in range(i+1, n):
            cc = c[i] * c[j]
            
            part_1 = r[i] * r[j]/4 + r[j]**2/6
            
            part_2 = 0
            for x in range(j+1, n):
                part_2 += r[i] * r[x] / 2 + r[j] *  r[x] / 2

            part_3 = 0
            part_4 = 0
            for y in range(i+1, j):
                part_3 += r[y] * r[j] / 2
                for z in range(j+1, n):
                    part_4 += r[y] * r[z]

            sum_2 += cc*(part_1 + part_2 + part_3 + part_4)
    return sum_1 + sum_2

def calculate_p1(r, c):
    n = len(r)
    sum_1 = 0
    
    #calculate cr
    for i in range(n):
        for j in range(i, n):
            if i == j:
                sum_1 += c[i] * r[j] / 2
            else:
                sum_1 += c[i] * r[j]
    return sum_1

def calculate_m1(r, c):
    n = len(r)
    sum_1 = 0
    
    #calculate cr
    for i in range(n):
        for j in range(0, i+1):
            if i == j:
                sum_1 += c[i] * r[j] / 2
            else:
                sum_1 += c[i] * r[j]
    return sum_1

def calculate_m2(r, c):
    n = len(r)
    sum_1 = 0
    sum_2 = 0
    
    #calculate r^2
    for i in range(n):
        for j in range(i, n):
            if i == j:
                sum_1 += r[i]**2 * c[i] * c[j] / 24
            else:
                sum_1 += r[i]**2 * c[i] * c[j] / 6

    #calculate rr
    for i in range(n-1):
        for j in range(i+1, n):
            rr = r[i] * r[j]
            
            part_1 = c[i] * c[j]/4 + c[j]**2/6
            
            part_2 = 0
            for x in range(j+1, n):
                part_2 += c[i] * c[x] / 2 + c[j] *  c[x] / 2

            part_3 = 0
            part_4 = 0
            for y in range(i+1, j):
                part_3 += c[y] * c[j] / 2
                for z in range(j+1, n):
                    part_4 += c[y] * c[z]

            sum_2 += rr*(part_1 + part_2 + part_3 + part_4)
    return sum_1 + sum_2
