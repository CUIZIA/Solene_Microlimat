############### 01: Wind speed model ###############
# This function currently implements simplified models that only consider wind speed.
############### 01: Wind speed model ###############
def calculer_convection_coefficient(wind_speed, model='ashrae'):
    """
    Calculate the convective heat transfer coefficient based on the given model and wind speed.

    Parameters:
    wind_speed (float): The wind speed in m/s, could be a list.
    model (str): The model to use for calculation. Default is 'ashrae'.

    Returns:
    float: The convective heat transfer coefficient in W/(m^2·K).
    """
    if model.lower() == 'ashrae':
        # ASHRAE model 
        h = 5.7 + 3.8 * wind_speed
    elif model.lower() == 'jayamaha':
        # JAYAMAHA model
        h = 4.955 + 1.444 * wind_speed
    elif model.lower() == 'vinet': #used by J.Bouyer
        # VINET default model in SOLENE
        h = 5.85 + 1.7 * wind_speed
    else:
        raise ValueError(f"Unknown model: {model}")
    return h

############### COMPREHENSIVE model ###############
# More comprehensive models can take into account additional factors such as:
# - Surface temperature and air temperature difference
# - Surface roughness
# - Other environmental conditions
############### COMPREHENSIVE model ###############
def angle_to_vector(angle):
    rad = np.radians(angle)
    return np.array([np.cos(rad), np.sin(rad), 0])

def calculate_windward_leeward(normals, wind_direction):
    """
    normals is the sim.solEnv.geom.triangles.normale
    """
    wind_vector = angle_to_vector(wind_direction)
    
    Wf = []
    for normal in normals:
        dot_product = np.dot(wind_vector, normal)
        norm_wind = np.linalg.norm(wind_vector)
        norm_normal = np.linalg.norm(normal)
        cos_theta = dot_product / (norm_wind * norm_normal)
        angle = np.degrees(np.arccos(cos_theta))

        if angle <= 100:
            Wf.append(1)  # windward
        else:
            Wf.append(0.5)  # leeward
            
    return Wf

############### 02: MHAzam model ###############
# - Surface temperature (degree)
# - Air temperature (degree)
# - wind speed (m/s)
############### 02: MHAzam model ###############
def calculer_hc(Tsurf,Tair,Vair):
	v=1.57*10.**(-5.)
	Cpair=1006.
	lamb=0.0262
	Pr=0.708 
	L=1.
	g=9.81
	Re=Vair*L/v
	Ba=1./(Tair+273.)
	Gr=Ba*g*L**3.*abs(Tsurf-Tair)/v**2.  ## à la place de 25 faut mettre Tsurf 	#libre 
	if 10*Re**2 < np.mean(Gr):		#laminaire 
		if np.mean(Gr)<10**9:
			h=(lamb/L)*0.49*Gr**(1./4.)		#turbulent
		else:
			h=(lamb/L)*0.13*Gr**(1./3.)	
	#forcé 
	elif Re**2 > 10*np.mean(Gr):
		#laminaire 
		if np.mean(Gr)<10**9:
			h=(lamb/L)*0.56*Re**(1./2.)		#turbulent
		else:
			h=(lamb/L)*0.03*Re**(4./5.)
	#mixte 
	else:		#laminaire 
		if np.mean(Gr)<10**9:
			h=(lamb/L)*0.68*(0.57*Gr**(3./4.)+Re**(3./2.))**(1./3.)		#turbulent
		else:
			h=(lamb/L)*0.03*(12.1*Gr+Re**(12./5.))**(1./3.)
	return h 

############### 03: Vehrencamp model (ground) ###############
# - Surface temperature (degree)
# - Air temperature (degree)
# - wind speed (m/s)
############### 03: Vehrencamp model (ground) ###############
def calculer_hc(Tsurf,Tair,Vair):
      Tm = (Tsurf + Tair)/2
      a = 1.4
      d = 0.5
      h = 698.24*a*(0.00144*Tm**0.3*Vair**d + 0.00097*abs(Tsurf - Tair)**0.3)
      return h

############### 04: Dendy model ###############
# - Surface temperature (degree)
# - Air temperature (degree)
# - wind speed (m/s)
############### 04: Dendy model ###############
def calculer_df():
      rhoa = 1.2
      Cp = 1006
      k = 0.4
      rT = log/(Vair*k**2)
      h = rhoa*Cp/rT 
