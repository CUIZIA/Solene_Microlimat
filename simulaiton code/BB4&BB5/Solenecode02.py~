from main import * 
import math
import numpy as np
from solFile import read_val
import shutil
import os

chemin_fichier_xml='/home/solene/Bureau/case1/param.xml' 
sim = SimulationCouplee(chemin_fichier_xml) 

#########################
### calculs solaires ### 
######################### 
sim.SolCommand.param['latitude'] = 48.785
sim.SolCommand.param['longitude'] = 2.474

#####################################
### insert the meteo file (radiation file) ### 
#####################################
meteo_folder = '/media/sf_SharedVBox/meteo Juin/' #copypaste your meteo file into ciel folder
destination_folder = '/home/solene/Bureau/simulation/simulSol/ciel/'
for filename in os.listdir(meteo_folder):
    meteo_file = os.path.join(meteo_folder,filename)
    dst_file = os.path.join(destination_folder,filename)
    if os.path.isfile(meteo_file):
        shutil.copy2(meteo_file, dst_file)

sim.solEnv.creer_descripteur_solaires()
sim.SolCommand.calculer_luminance_ciel()
sim.SolCommand.calculer_flux_solaires(fichier_meteo=True)
sim.solEnv.supprimer_nan(sim.SolCommand.chemin_clo+'/flux_sol_diffus')
sim.solEnv.supprimer_nan(sim.SolCommand.chemin_clo+'/flux_sol_direct')
sim.solEnv.supprimer_nan(sim.SolCommand.chemin_clo+'/flux_sol_total')
sim.SolCommand.calculer_fac_form()
sim.SolCommand.calculer_fac_form_ciel()
sim.SolCommand.calculer_radiosite()
liste_radiation = ['ecl_abs_total', 'ecl_diffus', 'ecl_inc_total', 'ecl_ref_total', 'flux_sol_diffus', 'flux_sol_direct', 'flux_sol_total']
sim.solEnv.recuperer_resultat(lst_var = liste_radiation)

############### 03: Vehrencamp model (ground) ###############
# - Surface temperature (degree)
# - Air temperature (degree)
# - wind speed (m/s)
############### 03: Vehrencamp model (ground) ###############
def calculer_hc(Tsurf,Tair,Vair):
	v=1.57*10.**(-5.)
	Cpair=1006.
	lamb=0.0262
	Pr=0.708 
	L=1.
	g=9.81
	Re=Vair*L/v
	Ba=1./(Tair+273.)
	Gr=Ba*g*L**3.*abs(Tsurf-Tair)/v**2.  ## à la place de 25 faut mettre Tsurf 	#libre 
	if 10*Re**2 < np.mean(Gr):		#laminaire 
		if np.mean(Gr)<10**9:
			h=(lamb/L)*0.49*Gr**(1./4.)		#turbulent
		else:
			h=(lamb/L)*0.13*Gr**(1./3.)	
	#forcé 
	elif Re**2 > 10*np.mean(Gr):
		#laminaire 
		if np.mean(Gr)<10**9:
			h=(lamb/L)*0.56*Re**(1./2.)		#turbulent
		else:
			h=(lamb/L)*0.03*Re**(4./5.)
	#mixte 
	else:		#laminaire 
		if np.mean(Gr)<10**9:
			h=(lamb/L)*0.68*(0.57*Gr**(3./4.)+Re**(3./2.))**(1./3.)		#turbulent
		else:
			h=(lamb/L)*0.03*(12.1*Gr+Re**(12./5.))**(1./3.)
	return h

#####################################
### wind speed transformation ### 
#####################################
def wind_speed_at_height(u1, z1, z2, z0):
    u = u1*(math.log(z2/z0)/math.log(z1/z0))
    if u < 0.5:
        return 0.5
    else:
        return u

z0 = 0.4 #surface roughness length

#####################################
### creation des fichiers necessaire au calcul thermoradiatif ### 
#####################################
sim.solEnv.definir_meteo_liste(sim.meteo_liste) 
sim.solEnv.creer_descripteur_veg() 
sim.solEnv.creer_param_simulation_ts(T_init = 22, hc = 10) 
sim.solEnv.creer_evaporation()

####################################################
## Chemin vers l'executable de simulation thermoradiative ## 
## Le chemin entier est necessaire si il est place dans un repertoire en dehors du PATH ## 
#################################################### 
# nom_commande = 'simulation_Ts_EnergieBatBB4.exe'
nom_commande = 'simulation_Ts_EnergieBatBB5.exe'

###########################
### pas de temps 'zero' : initialisation ### 
###########################
v0 = wind_speed_at_height(sim.meteo_liste[0]['v'], 3, 10, z0)
sim.solEnv.creer_param_simulation_ts(hc = 10)
sim.solEnv.definir_meteo(0,veg=True) 
sim.SolCommand.simulation_Ts_EnergieBat_new('init', # suffixe pour le pas de temps precedent 'init' 
    sim.TimeStep.liste_ts_sol[0], # suffixe pour le pas de temps du calcul 
    simulation_batiment = False, # utilisation ou non de simulation de lenergetique du batiment 
    simulation_vegetation = True, # utilisation ou non de model nodal pour la vegetation 
    meteo = True, # utilisation des parametre meteo pour les flux IR atmospherique
    nom_commande = nom_commande, # nom de l'executable pour la simulation thermoradiative
    terminal = True) # affichage de la sortie standart dans le terminal

###########################
### pas de temps suivants ### 
###########################
for i in range(1, len(sim.TimeStep.liste_ts_sol)):
    avant = sim.TimeStep.liste_ts_sol[i-1] 
    apres = sim.TimeStep.liste_ts_sol[i]
    vi = wind_speed_at_height(sim.meteo_liste[i]['v'], 3, 10, z0)
    liste = np.zeros(sim.solEnv.geom.n_triangles) #liste of hc
    Tair = sim.meteo[avant]['T']
    Tsurf = read_val(sim.SolCommand.var['Tse'] + '_' + avant + '.val', geom = sim.geom_sol)
    l1 = sim.solEnv.geom.faces.liste_triangles
    for l2 in l1:
        for i in range(len(l2)):
            liste[l2[i]] = calculer_hc(Tsurf[l2[i]], Tair, vi)   
    write_val(sim.SolCommand.var['hc'], sim.solEnv.geom, liste) #where liste number should equal to the number of triangles 
    sim.solEnv.definir_meteo(i,veg=True) 
    sim.SolCommand.simulation_Ts_EnergieBat_new(avant, 
                                                apres, 
                                                simulation_batiment = False, 
                                                simulation_vegetation = True, 
                                                meteo = True, 
                                                nom_commande = nom_commande)
    print '\t sim_ts : de %s a %s' % (avant, apres)

from vtkFile import*
sim.solEnv.exporter_vtu(sim.post+'/resu_simu')

write_vtu_face(sim.geom_sol,sim.post+'/resu_simu_face.vtu')

raw_input("Phase avec : Press Enter to continue...")
